---
- hosts: all

  remote_user: vagrant
  sudo: True

  vars:
    oracle_repository: /opt/repo/oracle

    beahome: "/opt/oracle/weblogic"
    beahomeESCAPE: \/opt\/oracle\/weblogic

    wlsinstalldir: "/opt/oracle/weblogic/wlserver_10.3"
    wlsinstalldirESCAPE: \/opt\/oracle\/weblogic\/wlserver_10\.3

    weblogicuserhome: "/home/weblogic"

    wlsjar: wls1036_generic.jar

  tasks:

  #
  # if weblogic is running, nothing to do
  #
  - name: check if weblogic is running (cannot use /etc/init.d/ status yet)
    shell: /usr/bin/pgrep -f "^.*/usr/.*java/.*weblogic.NodeManager.*" | true
    register: weblogic_is_running
    ignore_errors: true

  - name: need group weblogic
    group: name=weblogic state=present
  - name: need user weblogic 
    user: name=weblogic group=weblogic append=yes createhome=yes state=present

  - name: directory /opt/oracle owned by weblogic
    file: path=/opt/oracle owner=weblogic group=weblogic state=directory
  - name: push user environment
    copy: src=../files/silentWeblogic.sh dest=/etc/profile.d/weblogic.sh
      owner=root group=root mode=0644

  - name: check file {{ wlsjar }} 
    stat: path={{  weblogicuserhome }}/{{ wlsjar }}
    register: check_file_wls
  - name: need file {{ wlsjar }} in {{ weblogicuserhome }}
    copy: src={{ oracle_repository }}/{{ wlsjar }} dest={{ weblogicuserhome }}/{{ wlsjar }}
      owner=weblogic  group=weblogic mode=0644
    when: check_file_wls.stat.exists == false

  - name: silent.xml for weblogic silent installation
    copy: src=../files/silent.xml dest={{ weblogicuserhome }}/silent.xml
      force=yes
  - name: parameters in file silent.xml beahome 
    shell: ' perl -p -i -e "s/<%= beahome %>/{{ beahomeESCAPE }}/g" /home/weblogic/silent.xml '
  - name: parameters in file silent.xml wlsinstalldir
    shell: ' perl -p -i -e "s/<%= wlsinstalldir %>/{{ wlsinstalldirESCAPE }}/g" /home/weblogic/silent.xml '

  - name: get latest files for silent create domain= silentconf.xml
    copy: src=../files/silentconf.xml dest={{ weblogicuserhome }}/silentconf.xml
      force=yes

  - name: dir within /opt/oracle/weblogic =beahome owned by weblogic.weblogic
    file: path={{ beahome }}  owner=weblogic group=weblogic state=directory recurse=yes
    when: weblogic_is_running.stdout == ""


  #
  # weblogic install
  #

  # 2do: check if this file is OK to define weblogic installed on disk
  - name: check if exists file /opt/oracle/weblogic/inventory/ContentsXML/comps.xml , weblogic installed 
    stat: path={{ beahome }}/inventory/ContentsXML/comps.xml
    register: weblogic_files_already_installed

  # 2do remove the unnecessary check - which file to test for weblogic properly installed?
  - name: check if exists file startNodeManager.sh  , the installer
    stat: path={{ wlsinstalldir }}/server/bin/startNodeManager.sh
    register: weblogic_check

  - name: weblogic silent install
    shell: " su - weblogic -c '  java -jar {{ wlsjar }} -mode=silent -silent_xml=silent.xml -log=platform_install.log ' "
    when: weblogic_check.stat.exists == false and weblogic_is_running.stdout == "" and weblogic_files_already_installed.stat.exists == False

  - name: directories expected /var/tmp/weblogic (java.io.tmpdir in java_options)
    file: path=/var/tmp/weblogic owner=weblogic group=weblogic state=directory mode=755
    # check if  owner/recursive is correct, maybe from sys.tgz if present - NOT recursive now
    when: weblogic_is_running.stdout == ""

  - name: directories expected /var/log/weblogic
    file: path=/var/log/weblogic owner=weblogic group=weblogic state=directory mode=755

  - name: weblogic service so need /etc/init.d/weblogic
    copy: src=../files/etc_init.d_weblogic dest=/etc/init.d/weblogic
      owner=root group=root mode=0755
  - name: service to be activated but not started, yet (later, after domain creation)
    service: name=weblogic  enabled=yes pattern=weblogic.Server
    # NO START, YET -- service: name=weblogic  enabled=yes  state=started pattern=weblogic.Server

  - name: get last line from install log
    shell: tail -n 1 {{ weblogicuserhome }}/platform_install.log
    register: install_log_lastline
  - name: check if install log ends with "success"
    fail: msg="weblogic not installed - ERROR {{ install_log_lastline }}"
    when: not install_log_lastline.stdout.find("The installation was successfull!") 


    

